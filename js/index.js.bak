/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicitly call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        app.receivedEvent('deviceready');
		 var db = window.sqlitePlugin.openDatabase({name: "hospital.db"});

		 db.transaction(function(tx) {
		tx.executeSql('DROP TABLE IF EXISTS rate');
		tx.executeSql('CREATE TABLE IF NOT EXISTS rate (id integer primary key, rating integer)');

		// demonstrate PRAGMA:
		db.executeSql("pragma table_info (rate);", [], function(res) {
		  console.log("PRAGMA res: " + JSON.stringify(res));
		});

		tx.executeSql("INSERT INTO rate (rating) VALUES (?)", [5], function(tx, res) {
		  console.log("insertId: " + res.insertId + " -- probably 1");
		  console.log("rowsAffected: " + res.rowsAffected + " -- should be 1");

		  db.transaction(function(tx) {
			tx.executeSql("select count(id) as cnt from rate;", [], function(tx, res) {
			  console.log("res.rows.length: " + res.rows.length + " -- should be 1");
			  console.log("res.rows.item(0).cnt: " + res.rows.item(0).cnt + " -- should be 1");
			});
		  });

		}, function(e) {
		  console.log("ERROR: " + e.message);
		});
	  });
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
    }
};

app.initialize();

function rate(score){
	alert(score);
	var db = window.sqlitePlugin.openDatabase({name: "hospital.db"});

	db.transaction(function(tx) {
		tx.executeSql("INSERT INTO rate (rating) VALUES (?)", [score], function(tx, res) {
		  console.log("insertId: " + res.insertId + " -- probably 1");
		  console.log("rowsAffected: " + res.rowsAffected + " -- should be 1");

		  db.transaction(function(tx) {
			tx.executeSql("select count(id) as cnt from rate;", [], function(tx, res) {
			  console.log("res.rows.length: " + res.rows.length + " -- should be 1");
			  console.log("res.rows.item(0).cnt: " + res.rows.item(0).cnt + " -- should be 1");
			});
		  });

		}, function(e) {
		  console.log("ERROR: " + e.message);
		});
	 });
}